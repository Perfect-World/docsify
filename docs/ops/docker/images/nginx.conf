# 用户
user nginx;
# 开启进程数
worker_processes  auto; 
# 绑定worker进程和CPU
worker_cpu_affinity auto;
# 设定Nginx的工作模式及连接数上限
events {
    # 高效工作模式
    use epoll;
    # 每个进程最大连接数
    worker_connections  10240;
}
http {
    #第一个参数：$binary_remote_addr 表示通过remote_addr这个标识来做限制，
    #“binary_”的目的是缩写内存占用量，是限制同一客户端ip地址
    #第二个参数：zone=one:10m表示生成一个大小为10M，名字为one的内存区域，用来存储访问的频次信息
    #第三个参数：rate=1r/s表示允许相同标识的客户端的访问频次，这里限制的是每秒1次，还可以有比如30r/m的
    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
    # 外链配置文件
    include    mime.types;
    # nginx默认文件类型
    default_type  application/octet-stream;
    # 如下三个属性优化Nginx静态资源的处理
    sendfile    on;
    tcp_nopush    on;
    tcp_nodelay    on;
    # TCP超时时间默认75秒，有些浏览器最多只保持60秒，所以可以设定为60秒。
    keepalive_timeout    60;
    #开启gzip
    gzip    on;  
    #低于1kb的资源不压缩 
    gzip_min_length    1k;
    #压缩级别1-9，越大压缩率越高，同时消耗cpu资源也越多，建议设置在5左右。 
    gzip_comp_level    5; 
    #需要压缩哪些响应类型的资源，多个空格隔开。不建议压缩图片.
    gzip_types    text/plain application/javascript application/x-javascript text/javascript text/xml text/css;  
    #配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）
    gzip_disable    "MSIE [1-6]\\.";  
    #是否添加“Vary: Accept-Encoding”响应头
    gzip_vary    on;
    #上传文件的大小限制  默认1m
    client_max_body_size    8m;
    #定义日志过滤正则，静态文件，健康检查 clb-healthcheck
    map $http_user_agent$uri $log_filter {
        default    1;
        ~^(.*\.(gif|jpg|jpeg|png|bmp|swf|js|css|svg|woff|ttf|ico)$) 0;
        ~^clb-healthcheck*    0;
    }
    log_format  main  '$remote_addr - $remote_user [$request_time $upstream_response_time] [$time_iso8601] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main if=$log_filter;
    error_log /var/log/nginx/error.log;
    
    server {
        listen 10002;
        listen 10003 ssl; 
        server_name woodenexchange.com;
        ssl_certificate woodenexchange.com_bundle.crt; 
        ssl_certificate_key woodenexchange.com.key; 
        location / {
            alias    /usr/share/nginx/;
            index    index.html;
        }
        location /api {
            rewrite     ^/api/(.*)$ /$1 break;
            proxy_pass  http://10.10.4.3:30001;
            charset     utf-8; #显示中文
            add_header  'Access-Control-Allow-Origin' '*'; #允许来自所有的访问地址
            add_header  'Access-Control-Allow-Credentials' 'true'; #支持请求方式
            add_header  'Access-Control-Allow-Methods' 'GET, PUT, POST, DELETE, OPTIONS';
            add_header  'Access-Control-Allow-Headers' 'Content-Type,*';  
        }
    }
}
stream {
    upstream http_gateway {
        server  127.0.0.1:10002;
    }
    upstream https_gateway {
        server  127.0.0.1:10003;
    }
    map $ssl_preread_protocol $upstream{
        default http_gateway;
        "TLSv1.0" https_gateway;
        "TLSv1.1" https_gateway;
        "TLSv1.2" https_gateway;
        "TLSv1.3" https_gateway;
    }
    server {
        listen 10001;
        ssl_preread on;
        proxy_pass $upstream;
    }
}
